// Code generated by MockGen. DO NOT EDIT.
// Source: models/storage.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	reflect "reflect"

	models "github.com/CardozoCasariegoLuciano/StudyNotes-backend/models"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockIstorage is a mock of Istorage interface.
type MockIstorage struct {
	ctrl     *gomock.Controller
	recorder *MockIstorageMockRecorder
}

// MockIstorageMockRecorder is the mock recorder for MockIstorage.
type MockIstorageMockRecorder struct {
	mock *MockIstorage
}

// NewMockIstorage creates a new mock instance.
func NewMockIstorage(ctrl *gomock.Controller) *MockIstorage {
	mock := &MockIstorage{ctrl: ctrl}
	mock.recorder = &MockIstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIstorage) EXPECT() *MockIstorageMockRecorder {
	return m.recorder
}

// ComparePasswords mocks base method.
func (m *MockIstorage) ComparePasswords(hashedPass, bodyPass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePasswords", hashedPass, bodyPass)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePasswords indicates an expected call of ComparePasswords.
func (mr *MockIstorageMockRecorder) ComparePasswords(hashedPass, bodyPass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePasswords", reflect.TypeOf((*MockIstorage)(nil).ComparePasswords), hashedPass, bodyPass)
}

// CreateUser mocks base method.
func (m *MockIstorage) CreateUser(user *models.User) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIstorageMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIstorage)(nil).CreateUser), user)
}

// FindUserByEmail mocks base method.
func (m *MockIstorage) FindUserByEmail(email string, model *models.User) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", email, model)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockIstorageMockRecorder) FindUserByEmail(email, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockIstorage)(nil).FindUserByEmail), email, model)
}
