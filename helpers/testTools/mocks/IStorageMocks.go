// Code generated by MockGen. DO NOT EDIT.
// Source: models/apiModels/storage.go

// Package mock_apimodels is a generated GoMock package.
package mock_apimodels

import (
	reflect "reflect"

	dbmodels "github.com/CardozoCasariegoLuciano/StudyNotes-backend/models/dbModels"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockIstorage is a mock of Istorage interface.
type MockIstorage struct {
	ctrl     *gomock.Controller
	recorder *MockIstorageMockRecorder
}

// MockIstorageMockRecorder is the mock recorder for MockIstorage.
type MockIstorageMockRecorder struct {
	mock *MockIstorage
}

// NewMockIstorage creates a new mock instance.
func NewMockIstorage(ctrl *gomock.Controller) *MockIstorage {
	mock := &MockIstorage{ctrl: ctrl}
	mock.recorder = &MockIstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIstorage) EXPECT() *MockIstorageMockRecorder {
	return m.recorder
}

// ComparePasswords mocks base method.
func (m *MockIstorage) ComparePasswords(hashedPass, bodyPass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePasswords", hashedPass, bodyPass)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePasswords indicates an expected call of ComparePasswords.
func (mr *MockIstorageMockRecorder) ComparePasswords(hashedPass, bodyPass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePasswords", reflect.TypeOf((*MockIstorage)(nil).ComparePasswords), hashedPass, bodyPass)
}

// DeleteByID mocks base method.
func (m *MockIstorage) DeleteByID(id int, model interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id, model)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockIstorageMockRecorder) DeleteByID(id, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockIstorage)(nil).DeleteByID), id, model)
}

// FindUserByEmail mocks base method.
func (m *MockIstorage) FindUserByEmail(email string, model *dbmodels.User) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", email, model)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockIstorageMockRecorder) FindUserByEmail(email, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockIstorage)(nil).FindUserByEmail), email, model)
}

// GetAll mocks base method.
func (m *MockIstorage) GetAll(model interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", model)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIstorageMockRecorder) GetAll(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIstorage)(nil).GetAll), model)
}

// GetById mocks base method.
func (m *MockIstorage) GetById(id int, model interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id, model)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetById indicates an expected call of GetById.
func (mr *MockIstorageMockRecorder) GetById(id, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIstorage)(nil).GetById), id, model)
}

// Save mocks base method.
func (m *MockIstorage) Save(anyModel interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", anyModel)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIstorageMockRecorder) Save(anyModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIstorage)(nil).Save), anyModel)
}
